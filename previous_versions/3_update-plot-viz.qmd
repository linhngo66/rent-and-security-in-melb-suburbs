---
title: "ETC5512: Assignment 4"
author: "Thuy Ngo" 
format: 
  html:
    toc: TRUE
---

:::{.panel-tabset}
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE,
                      warning = TRUE, 
                      message = TRUE) 
```

# Data details

## Question 1

## Question 2 - Data collection

- Victoria Crime Statistics: <https://www.crimestatistics.vic.gov.au/crime-statistics/latest-victorian-crime-data/download-data>
    - LGA Recorded Offences Year Ending December 2024 
    - LGA Criminal Incidents Year Ending December 2024
- Population: G01 Geopackage
- Annual growth rate of population: <https://www.abs.gov.au/statistics/people/population/national-state-and-territory-population/latest-release#data-downloads>
    - Get population in 2024 to calculate growth rate -> Apply that to census data
- Median rent: G02 Geopackage
- CPI

## Question 3 - Data description

## Question 4 - Data transformation
```{r}
#| echo: false

library(tidyverse)
library(ggplot2)
library(here)
library(sf)
library(readxl)
library(janitor)
library(readr)
library(ggrepel)
```

### Data import
```{r import-cencus-rent-population}
# Import GeoPackage data on Median weekly rent (G02) and Population (G01)
geopath_2021_G02 <- here::here("data/raw/Geopackage_2021_G02_VIC_GDA2020/G02_VIC_GDA2020.gpkg")
st_layers(geopath_2021_G02)

median_rent <- read_sf(geopath_2021_G02, layer = "G02_SAL_2021_VIC") |> 
    select(SAL_CODE_2021, SAL_NAME_2021, Median_rent_weekly, geom) |> 
    clean_names() |> 
    filter(!(sal_code_2021 %in% c("SAL29494", "SAL29797")))

geopath_2021_G01 <- here::here("data/raw/Geopackage_2021_G01_VIC_GDA2020/G01_VIC_GDA2020.gpkg")
population <- read_sf(geopath_2021_G01, layer = "G01_SAL_2021_VIC") |> 
    select(SAL_CODE_2021, SAL_NAME_2021, Tot_P_M, Tot_P_F, Tot_P_P, geom) |> 
    clean_names() |> 
    filter(!(sal_code_2021 %in% c("SAL29494", "SAL29797")))

```

```{r import-abs-cpi}
# Import CPI data from ABS
cpi <- read_excel(here::here("data/raw/abs-cpi-by-capital city.xlsx"), 
                sheet = "Data1", skip = 9) |> 
        select(`Series ID`, A2331841F) |> 
        rename(period = `Series ID`, rent_cpi = A2331841F)
```

```{r import-csa-data}
# Import crime data from CSA
incidents <- read_excel("data/raw/Data_Tables_LGA_Criminal_Incidents_Year_Ending_December_2024.xlsx", sheet = "Table 03") |> clean_names()

offences <- read_excel("data/raw/Data_Tables_LGA_Recorded_Offences_Year_Ending_December_2024.xlsx", sheet = "Table 03") |> clean_names()

harm_level <- read_tsv("data/raw/harm_category.csv", locale = locale(encoding = "UTF-16LE")) |> clean_names() |> 
    select(-key_elements, -x4)
```

```{r}
# Map LGA to their respective region
metro_lga_regions <- list(
  "Inner Metro Region" = c("Melbourne", "Port Phillip", "Yarra"),
  "Inner South East Region" = c("Stonnington", "Bayside", "Boroondara", "Glen Eira"),
  "Western Region" = c("Melton", "Brimbank", "Hobsons Bay", "Wyndham", "Moonee Valley", "Maribyrnong"),
  "Northern Region" = c("Banyule", "Whittlesea", "Nillumbik", "Hume", "Moreland", "Darebin", "Mitchell"),
  "Eastern Region" = c("Manningham", "Whitehorse", "Knox", "Yarra Ranges", "Maroondah", "Monash"),
  "Southern Region" = c("Kingston", "Frankston", "Cardinia", "Casey", "Greater Dandenong", "Mornington Peninsula")
)

# Convert to dataframe
metro_lga<- enframe(metro_lga_regions, name = "region", value = "lga") |>
  unnest(cols = lga)
```

### Harmonize suburb name between census and CSA
```{r list of extend and duplicated suburb}
# List of duplicated suburbs (different suburbs with same name but different LGA)
duplicated_suburb <- median_rent |>
    st_drop_geometry() |> 
    distinct(sal_code_2021, sal_name_2021) |> 
    mutate(suburb_base_name = str_remove(sal_name_2021, " \\(.*Vic\\.\\)"),
        lga = str_extract(sal_name_2021, "(?<=\\().+(?= - Vic\\.)"),
        is_duplicated = suburb_base_name %in% suburb_base_name[duplicated(suburb_base_name)],
        suburb_full_name = ifelse(
            is_duplicated,
            str_remove(sal_name_2021, " - Vic\\."),
            str_remove(sal_name_2021, "\\s*\\(.*\\)")
        ) |> str_trim())

# List of extend suburbs (the same suburb but extend to more than 1 LGA)
extend_suburb <- bind_rows(incidents, offences) |> 
    distinct(local_government_area, suburb_town_name) |> 
    mutate(
        across(c("suburb_town_name", "local_government_area"), ~str_trim(.x)),
        suburb_lga_paste = paste0(suburb_town_name, " (", local_government_area, ")")) |> 
    left_join(duplicated_suburb, by = c("suburb_lga_paste" = "suburb_full_name")) |> 
    filter(is.na(is_duplicated)) |>
    mutate(is_extend = suburb_town_name %in% suburb_town_name[duplicated(suburb_town_name)]) |> 
    select(local_government_area, suburb_town_name, is_extend)

suburb_lga_dict <- duplicated_suburb |> 
    filter(!is_duplicated) |> 
    left_join(extend_suburb, by = c("suburb_base_name" = "suburb_town_name")) |> 
    bind_rows(duplicated_suburb |> filter(is_duplicated)) |> 
    mutate(lga = coalesce(lga, local_government_area)) |> 
    select(-local_government_area) |> 
    left_join(median_rent |> select(sal_code_2021, geom), by = "sal_code_2021") |> 
    left_join(metro_lga, by = "lga") |> 
    mutate(region = coalesce(region, "Regional"))
```

### Estimate population in 2024 by suburb
 ```{r est-pop-by-suburb}
 
vic_pop_2024 <- 7012962
vic_pop_2021 <- 6566092
cencus_pop <- sum(population$tot_p_p)

pop_growth_rate <- (vic_pop_2024/cencus_pop)-1

est_pop <- population |> 
    mutate(across(c("tot_p_m", "tot_p_f", "tot_p_p"), ~round(.x*(1+pop_growth_rate))))
 ```


### Estimate median rent in 2024 by suburb
```{r}
cpi_2021 <- cpi |> 
    filter(period == ymd("2021-12-01")) |> select(rent_cpi) |> pull()

cpi_2024 <- cpi |> 
    filter(period == ymd("2024-12-01")) |> select(rent_cpi) |> pull()

est_median_rent <- median_rent |>
    mutate(median_rent_weekly = round(median_rent_weekly*cpi_2024/cpi_2021))
```

### Calculate crime rate

Follow the formula defined by CSA:

- Offence rate = (Offence count/ERP count) *100000
- Criminal incident rate = (Criminal incident count/ERP count) *100000
```{r sum offence and incidents}
incidents_per_suburb <- incidents |> 
    filter(year == 2024) |> 
    left_join(suburb_lga_dict, by = c("local_government_area" = "lga", "suburb_town_name" = "suburb_base_name")) |>
    group_by(suburb_full_name) |> 
    summarise(incident_counts = sum(incidents_recorded))

offences_per_suburb <- offences |> 
    filter(year == 2024) |> 
    left_join(suburb_lga_dict, by = c("local_government_area" = "lga", "suburb_town_name" = "suburb_base_name")) |>
    group_by(suburb_full_name) |> 
    summarise(offence_counts = sum(offence_count))
```

```{r combine-with-census}
census_csa <- est_median_rent |> 
    st_drop_geometry() |> 
    left_join(est_pop, by = c("sal_name_2021", "sal_code_2021")) |> 
    left_join(suburb_lga_dict |> distinct(sal_code_2021, suburb_full_name, region), 
        by = "sal_code_2021") |> 
    left_join(incidents_per_suburb, by = "suburb_full_name") |> 
    left_join(offences_per_suburb, by = "suburb_full_name") |> 
    mutate(incident_counts = coalesce(incident_counts, 0),
           offence_counts = coalesce(offence_counts, 0),
           offence_rate = offence_counts/tot_p_p*100,
           incident_rate = incident_counts/tot_p_p*100)

#write_csv(census_csa, here::here("data/processed/census_csa.csv"))
```

### Map Offence type to Harm level
```{r}

offence_harm_level <- harm_level |>
  rename(offence_subgroup = crime_offence_groups_included_in_category) |>
  mutate(category = factor(category, c("High Harm", "Medium Harm", "Low Harm"))) |>
  right_join(offences, by = "offence_subgroup") |> 
  left_join(suburb_lga_dict, by = c("local_government_area" = "lga", "suburb_town_name" = "suburb_base_name")) |> 
  select(year, category, offence_subgroup, offence_division, offence_subdivision, offence_count, sal_code_2021, suburb_full_name, geom)

agg_offence_suburb <- offence_harm_level |>
  group_by(year, suburb_full_name, offence_division, offence_subdivision, category) |> 
  summarise(offence_counts = sum(offence_count)) |> 
  ungroup()
```

### Merge Suburb boundary to Region boundary
```{r}
census_csa <- st_as_sf(census_csa, sf_column_name = "geom")

region_boundary <- census_csa |> 
    group_by(region) |>
    summarise(region_geom = st_union(geom))
```

### Downscale to metropolitan area
```{r}
#| echo: false
census_csa_metro <- census_csa |> 
    filter(region != "Regional") |> 
    distinct(suburb_full_name, .keep_all = TRUE)
```

# Blog post

## Why am I looking at rent and security?

Since 18, I have moved 4 cities across Asia, Europe and now Australia, plus travelled to several countries in these continents. Uprooting my life every (other) year is fun, but it's also a lot of work, especially when it comes to finding a place to stay. I often find myself looking for accomodation without having set foot in the country and understanding how it is like to live there. 

As a young female who mostly travels solo, one of my most important criteria is neighborhood safety. However, security often comes as a cost. From my experience, areas that are considered safe are often pricier than those that are not. However, I am a self-funded student, whose budget can only go so far. So when I started to look at a place to stay in Melbourne, I was again faced with a difficult question: how can I find a place that is safe and affordable?

## My questions

## Where I got my data

## What does the data tell me?

## Key takeaways

## What's next in the agenda?

## Median rent
```{r}
# Map median rent
census_csa_metro |> 
    ggplot() +
    geom_sf(aes(fill = median_rent_weekly), color = "grey20") +
    geom_sf(
      data = region_boundary |> filter(region != "Regional"), 
      fill = NA, 
      color = "#c1440e", 
      linewidth = 0.5) +
    scale_fill_gradientn(
    colours = c("#bdd7e7", "#6baed6", "#3182bd", "#08519c", "#08306b"),
    limits = c(0, 750),
    breaks = seq(0, 750, by = 150),
    oob = scales::squish) +
    theme_minimal() +
    #coord_sf(xlim = c(144.5, 145.5), ylim = c(-38.1, -37.6)) +
    labs(title = "Median weekly rent by suburb",
         fill = "Median weekly rent (weekly)")
```

```{r}
region_colors <- c(
  "Eastern Region" = "#66c2a5",
  "Inner Metro Region" = "#fc8d62",
  "Inner South East Region" = "#8da0cb",
  "Northern Region" = "#e78ac3",
  "Southern Region" = "#a6d854",
  "Western Region" = "#ffd92f"
)

# Top 20 median rent - horizontal bar chart
census_csa_metro |> 
  arrange(desc(median_rent_weekly)) |> 
  slice_head(n = 20) |> 
  ggplot(aes(x = reorder(suburb_full_name, median_rent_weekly),
             y = median_rent_weekly,
             fill = region)) +
  geom_col() +
  geom_text(aes(label = median_rent_weekly),
            hjust = -0.1, size = 3) +
  scale_fill_manual(values = region_colors) +
  coord_flip() +
  labs(
    title = "Top 20 Suburbs with Highest Median Weekly Rent",
    x = NULL,
    y = "Median Weekly Rent ($)",
    fill = "Region"
  ) +
  theme_minimal(base_size = 12) +
  theme(
    panel.grid.major.y = element_blank(),
    panel.grid.minor = element_blank(),
    axis.line.x = element_blank(),
    axis.ticks.x = element_blank(),
    axis.text.x = element_blank()
  ) +
  expand_limits(y = max(census_csa_metro$median_rent_weekly) * 1.1)


# Top 20 lowest median rent - horizontal bar chart
census_csa_metro |> 
  distinct(suburb_full_name, .keep_all = TRUE) |>
  filter(median_rent_weekly > 0) |>
  arrange(median_rent_weekly) |>
  slice_head(n = 20) |> 
  ggplot(aes(x = reorder(suburb_full_name, median_rent_weekly),
             y = median_rent_weekly,
             fill = region)) +
  geom_col() +
  geom_text(aes(label = median_rent_weekly),
            hjust = -0.1, size = 3) +
  scale_fill_manual(values = region_colors) +
  coord_flip() +
  labs(
    title = "Top 20 Suburbs with Lowest Median Weekly Rent",
    x = NULL,
    y = "Median Weekly Rent ($)",
    fill = "Region"
  ) +
  theme_minimal(base_size = 12) +
  theme(
    panel.grid.major.y = element_blank(),
    panel.grid.minor = element_blank(),
    axis.line.x = element_blank(),
    axis.ticks.x = element_blank(),
    axis.text.x = element_blank()
  ) +
  expand_limits(y = max(census_csa_metro$median_rent_weekly) * 0.25)
```

## Incident rate
```{r}
# Map incident rate
census_csa_metro |>
  ggplot() +
  geom_sf(aes(fill = incident_rate), color = "grey20") +
  geom_sf(data = region_boundary |> filter(region != "Regional"),
    fill = NA,
    color = "#08306b",
    linewidth = 0.7) +
  scale_fill_gradientn(
    colours =  c("#fdd49e", "#e34a33", "#b30000", "#49006a"),
    limits = c(0, 40),
    breaks = seq(0, 40, by = 10),
    oob = scales::squish) +
  theme_minimal() + 
  coord_sf(xlim = c(144.5, 145.5), ylim = c(-38.1, -37.6)) +
  labs(title = "Incident Rate by Suburb",
    fill = "Incident Rate\n(per 100 residents)")
```

```{r}
# Top 20 lowest incident rate - horizontal bar chart
census_csa_metro |> 
  distinct(suburb_full_name, .keep_all = TRUE) |>
  arrange(incident_rate) |>   
  slice_head(n = 20) |> 
  ggplot(aes(x = reorder(suburb_full_name, incident_rate), 
             y = incident_rate, fill = region)) +
  geom_col() +
  geom_text(aes(label = round(incident_rate, 1)),
            hjust = -0.1, size = 3) +
  scale_fill_manual(values = region_colors) +
  coord_flip(clip = "off") +
  labs(
    title = "Top 20 Suburbs with Lowest Incident Rate",
    x = NULL,
    y = "Incident Rate (per 100 residents)",
    fill = "Region"
  ) +
  theme_minimal(base_size = 12) +
  theme(
    panel.grid.major.y = element_blank(),
    panel.grid.minor = element_blank(),
    axis.line.x = element_blank(),
    axis.ticks.x = element_blank(),
    axis.text.x = element_blank()
  ) +
  expand_limits(y = max(census_csa_metro$incident_rate) * 0.3)

# Top 20 highest incident rate - horizontal bar chart
census_csa_metro |> 
  distinct(suburb_full_name, .keep_all = TRUE) |>
  filter(incident_rate != Inf) |> 
  arrange(desc(incident_rate)) |>   
  slice_head(n = 20) |> 
  ggplot(aes(x = reorder(suburb_full_name, incident_rate), 
             y = incident_rate, fill = region)) +
  geom_col() +
  geom_text(aes(label = round(incident_rate, 1)),
            hjust = -0.1, size = 3) +
  scale_fill_manual(values = region_colors) +
  coord_flip(clip = "off") +
  labs(
    title = "Top 20 Suburbs with Highest Incident Rate",
    x = NULL,
    y = "Incident Rate (per 100 residents)",
    fill = "Region"
  ) +
  theme_minimal(base_size = 12) +
  theme(
    panel.grid.major.y = element_blank(),
    panel.grid.minor = element_blank(),
    axis.line.x = element_blank(),
    axis.ticks.x = element_blank(),
    axis.text.x = element_blank()
  ) +
  expand_limits(y = max(census_csa_metro$incident_rate) * 2)
```

```{r}
# Type of crime among top 20 incident rate
top_20_incident_rate <- census_csa_metro |> 
    distinct(suburb_full_name, .keep_all = TRUE) |>
    filter(region == "Eastern Region") |>
    arrange(desc(incident_rate)) |>
    slice_head(n = 20) |> 
    pull(suburb_full_name)

agg_offence_suburb |> 
    filter(suburb_full_name %in% top_20_incident_rate) |>
    group_by(offence_subdivision) |>
    summarise(count = n()) |> 
    arrange(desc(count)) |> 
    slice_head(n = 20) |> 
    ggplot() +
    geom_col(aes(x = reorder(offence_subdivision, count), y = count)) +
    labs(title = "Top 20 offence type by incident rate") +
    coord_flip()
```

## Main question: median rent vs incident rate
```{r}
# Scatter plot of median rent and incident rate
census_csa_metro |>
  ggplot(aes(x = median_rent_weekly, y = incident_rate)) +
  geom_point(aes(color = region), alpha = 0.5) +
  scale_x_continuous(limits = c(0, 750)) +
  scale_y_continuous(limits = c(0, 40)) +
  scale_color_manual(values = region_colors) +
  labs(title = "Median Weekly Rent vs Incident Rate by Region",
    x = "Median Weekly Rent ($)",
    y = "Incident Rate (per 100 residents)") +
  facet_wrap(~region, ncol = 6) +
  theme_bw() +
  theme(legend.position = "none",
    strip.text = element_text(face = "bold"))

```

## As a student in Monash, where should you stay?

```{r}
monash_suburb <- c("Clayton", "Chadstone", "Clayton South", "Glen Waverley", "Huntingdale", "Mount Waverley", "Mulgrave", "Notting Hill", "Oakleigh", "Oakleigh East", "Oakleigh South", "Springvale", "Wheeler's Hill", "Caulfield")

census_csa_metro |>
  distinct(suburb_full_name, .keep_all = TRUE) |>
  filter(suburb_full_name %in% monash_suburb) |>
  ggplot(aes(x = median_rent_weekly, y = incident_rate)) +
  geom_point() +
  geom_text_repel(aes(label = suburb_full_name), size = 3, max.overlaps = Inf) +
  scale_x_continuous(limits = c(NA, 600)) +
  scale_y_continuous(limits = c(0, 15)) +
  labs(title = "Median weekly rent vs Incident rate (per 100 residents) among suburbs near Monash Clayton",
    x = "Median weekly rent",
    y = "Incident rate")

agg_offence_suburb |> 
  filter(suburb_full_name %in% monash_suburb) |>
  group_by(offence_division, offence_subdivision) |>
  summarise(count = n(), .groups = "drop") |> 
  slice_max(count, n = 10, with_ties = FALSE) |> 
  ggplot(aes(x = reorder(offence_subdivision, count), y = count, fill = offence_division)) +
  geom_col() +
  geom_text(aes(label = count), hjust = -0.1, size = 3) +
  scale_fill_brewer(palette = "Set2") +
  coord_flip(clip = "off") +
  labs(
    title = "Top 10 Offence Types by Incident Rate in Monash Suburbs",
    x = NULL,
    y = "Number of Incidents",
    fill = "Offence Division"
  ) +
  theme_minimal(base_size = 12) +
  theme(
    panel.grid.major.y = element_blank(),
    panel.grid.minor = element_blank(),
    axis.line.x = element_blank(),
    axis.ticks.x = element_blank(),
    axis.text.x = element_blank(),
    plot.title.position = "plot",
    plot.title = element_text(hjust = 0.5),
    legend.position = "bottom"
  ) +
  expand_limits(x = max(agg_offence_suburb$count, na.rm = TRUE) * 1.1)
```

:::